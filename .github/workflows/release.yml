name: Build and Release (Docker + MicroPython)

on:
  push:
    tags:
      - "v*.*.*"
    branches: [ 'release' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: planz

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    name: Build and push Docker image
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ env.VERSION }}
            latest

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: false

  build-micropython-firmware:
    runs-on: ubuntu-latest
    name: Build MicroPython firmware for ESP8266 using official Docker toolchain

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python dependencies
        run: pip install pyserial esptool

      - name: Build mpy-cross (in Docker)
        run: |
          docker run --rm -v $HOME:$HOME -u $UID -w $PWD larsks/esp-open-sdk \
            make -C mpy-cross

      - name: Copy your scripts to frozen modules
        run: |
          mkdir -p ports/esp8266/modules
          cp scripts/*.py ports/esp8266/modules/

      - name: Build firmware (in Docker)
        run: |
          cd ports/esp8266
          docker run --rm -v $HOME:$HOME -u $UID -w $PWD larsks/esp-open-sdk \
            make -j BOARD=ESP8266_GENERIC

      - name: Upload firmware as artifact
        uses: actions/upload-artifact@v4
        with:
          name: esp8266-firmware
          path: ports/esp8266/build-ESP8266_GENERIC/firmware*.bin

      - name: Release firmware (if tagged)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ports/esp8266/build-ESP8266_GENERIC/firmware*.bin