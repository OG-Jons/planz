name: Build and Release (Docker + MicroPython)

on:
  push:
    tags:
      - "v*.*.*"
    branches: [ 'release' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: planz

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    name: Build and push Docker image
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ env.VERSION }}
            latest

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: false

  build-micropython-firmware:
    runs-on: ubuntu-latest
    name: Build MicroPython firmware for ESP8266
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y make python3 python3-pip wget tar gcc g++ libffi-dev git
          pip3 install pyserial

      - name: Install Xtensa GCC toolchain (official method)
        run: |
          mkdir -p toolchain
          cd toolchain
          wget https://github.com/espressif/crosstool-NG/releases/download/esp-2021r1/xtensa-lx106-elf-gcc8_4_0-esp-2021r1-linux-amd64.tar.xz
          tar -xf xtensa-lx106-elf-gcc8_4_0-esp-2021r1-linux-amd64.tar.xz
          echo "$PWD/xtensa-lx106-elf/bin" >> $GITHUB_PATH

      - name: Clone MicroPython
        run: |
          git clone https://github.com/micropython/micropython.git
          cd micropython
          git submodule update --init

      - name: Build mpy-cross (required for frozen modules)
        run: |
          cd micropython/mpy-cross
          make

      - name: Add your MicroPython scripts
        run: |
          mkdir -p micropython/ports/esp8266/modules
          cp scripts/*.py micropython/ports/esp8266/modules/

      - name: Build MicroPython ESP8266 firmware
        run: |
          cd micropython/ports/esp8266
          make submodules
          make

      - name: Upload firmware artifact
        uses: actions/upload-artifact@v4
        with:
          name: esp8266-firmware
          path: micropython/ports/esp8266/build/firmware*.bin

      - name: Release firmware (tagged)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            micropython/ports/esp8266/build/firmware*.bin
